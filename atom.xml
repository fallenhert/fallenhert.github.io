<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FallenHertBlog</title>
  
  
  <link href="https://fallenhert.github.io/atom.xml" rel="self"/>
  
  <link href="https://fallenhert.github.io/"/>
  <updated>2024-01-05T07:49:25.080Z</updated>
  <id>https://fallenhert.github.io/</id>
  
  <author>
    <name>Fallen Hert</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端八股文整理HTML&amp;CSS</title>
    <link href="https://fallenhert.github.io/2023/12/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87%E6%95%B4%E7%90%86HTML/"/>
    <id>https://fallenhert.github.io/2023/12/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87%E6%95%B4%E7%90%86HTML/</id>
    <published>2023-12-29T16:00:00.000Z</published>
    <updated>2024-01-05T07:49:25.080Z</updated>
    
    <content type="html"><![CDATA[<p>个人整理前端八股文和面试题，分模块梳理  </p><p>包含转载内容</p><h1 id="iframe优缺点"><a href="#iframe优缺点" class="headerlink" title="iframe优缺点"></a>iframe优缺点</h1><p><strong>优点</strong></p><ul><li>可以将网页原封不动的加载进来</li><li>增加代码的可用性</li><li>用来加载显示较慢的内容，如广告、视频等</li></ul><p><strong>缺点</strong></p><ul><li>加载的内容无法被浏览器引擎识别，对<code>SEO</code>不友好</li><li>会阻塞<code>onload</code>事件加载</li><li>会产生很多页面，不利于管理</li></ul><h1 id="Canvas和SVG"><a href="#Canvas和SVG" class="headerlink" title="Canvas和SVG"></a>Canvas和SVG</h1><ul><li><strong>canvas画布</strong>，是通过<code>javascript</code>来绘制2d图，是逐像素进行渲染。</li><li><strong>SVG矢量图</strong>，是基于<code>XML</code>描述的2D图形语言，每个元素都是可用的，可以为其添加事件。</li></ul><h1 id="盒模型：标准盒模型，怪异盒模型"><a href="#盒模型：标准盒模型，怪异盒模型" class="headerlink" title="盒模型：标准盒模型，怪异盒模型"></a>盒模型：标准盒模型，怪异盒模型</h1><p><a href="https://blog.csdn.net/qq_37899792/article/details/90019385">CSS盒模型</a></p><p>CSS 盒模型本质上是一个盒子，盒子包裹着HTML元素，盒子由四个属性组成，从内到外分别是：<strong>content 内容</strong>、<strong>padding 内填充</strong>、<strong>border 边框</strong>、<strong>外边距 margin</strong></p><p><img src="https://i.postimg.cc/g2NCk8nf/image.jpg" alt="标准盒模型.png"></p><p><img src="https://i.postimg.cc/sDzqYwWk/image.jpg" alt="怪异盒模型.png"></p><p>两种盒模型的区别在于容器宽度和高度的计算方式不同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">width = content-width</span><br><span class="line">height = content-height</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">width = content-width + padding-width + border-width</span><br><span class="line">height = content-height + padding-height + border-height</span><br></pre></td></tr></table></figure><p>想要切换盒模型，可以通过借用css3的box-sizing属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box-sizing: content-box // 标准盒模型</span><br><span class="line">box-sizing: border-box // 怪异盒模型</span><br></pre></td></tr></table></figure><h1 id="块元素与行内元素"><a href="#块元素与行内元素" class="headerlink" title="块元素与行内元素"></a>块元素与行内元素</h1><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><p>块元素拥有自己的宽高，也就是可以自定义width和height，它可以独占一行高度，一般可以作为其他元素容器，可容纳块元素及行内元素</p><p>块元素特点:.</p><ol><li>独占一行</li><li>宽高，外边距，内边距都可以控制，元素有<code>&lt;div&gt;</code>，<code>&lt;hn&gt;</code>，<code>&lt;p&gt;</code>，<code>&lt;form&gt;</code>，<code>&lt;hr&gt;</code>等等</li></ol><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><p>行内元素不可以设置宽高，但可以与其他行内元素位于同一行，行内元素高度一般由字体大小，宽度由内容长度控制决定</p><p>行内元素特点:</p><ol><li>不独占一行</li><li>宽高无效，<code>&lt;padding&gt;</code>和<code>&lt;margin&gt;</code>只能左右有效，上下无效，元素有<code>&lt;a&gt;</code>，<code>&lt;span&gt;</code>,<code>&lt;br&gt;</code>,<code>&lt;label&gt;</code>等</li></ol><p>通过设置dispaly可以更改</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: block // 定义为块元素</span><br><span class="line">display: inline // 定义为行内元素</span><br><span class="line">display: inline-block // 定义为行内块元素</span><br></pre></td></tr></table></figure><h1 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h1><p><a href="https://blog.csdn.net/eeeecw/article/details/80591511">什么是HTML语义标签？</a></p><h2 id="什么是HTML语义化标签"><a href="#什么是HTML语义化标签" class="headerlink" title="什么是HTML语义化标签"></a>什么是HTML语义化标签</h2><p>语义化标签旨在让标签具有自己的含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;一行文字&lt;/p&gt;</span><br><span class="line">&lt;span&gt;一行文字&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>如上案例所展示，<code>&lt;p&gt;</code>标签与<code>&lt;span&gt;</code>标签区别之一就在于<code>&lt;p&gt;</code>标签的含义是：段落，而<code>&lt;span&gt;</code>没有独特的含义。</p><h2 id="语义化标签的优势"><a href="#语义化标签的优势" class="headerlink" title="语义化标签的优势"></a>语义化标签的优势</h2><ol><li>代码结构清晰，方便阅读，有利于团队合作开发</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页</li><li>有利于搜索引擎优化（SEO）</li></ol><h2 id="常见语义化标签"><a href="#常见语义化标签" class="headerlink" title="常见语义化标签"></a>常见语义化标签</h2><ul><li><code>&lt;title&gt;</code> : 标题</li><li><code>&lt;hn&gt;</code> : h1~h6，分级标题，<code>&lt;hn&gt;</code>和<code>&lt;title&gt;</code>的协调有利于搜索引擎优化</li><li><code>&lt;ul&gt;</code> : 无序列表</li><li><code>&lt;li&gt;</code> : 有序列表</li><li><code>&lt;header&gt;</code> : 页眉，通常包括网站标志、主导航、全站链接以及搜索框</li><li><code>&lt;nav&gt;</code>：标记导航，仅对文档中重要的链接群使用。</li><li><code>&lt;main&gt;</code>：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能</li><li><code>&lt;small&gt;</code>：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。</li><li><code>&lt;strong&gt;</code>：和 <code>em</code> 标签一样，用于强调文本，但它强调的程度更强一些。</li><li><code>&lt;em&gt;</code>：将其中的文本表示为强调的内容，表现为斜体。</li></ul><h1 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h1><p><a href="https://juejin.cn/post/7198386916760141883">CSS伪类和伪元素的区别</a></p><p><strong>伪类</strong>是添加到选择器的关键字，用于<strong>指定所选元素的特殊状态</strong>，修改特殊状态下的样式</p><p>比如设置鼠标悬浮在按钮元素上时，设置背景色为红底白字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span>&#123; </span><br><span class="line">    <span class="attribute">background</span>:red; </span><br><span class="line">    <span class="attribute">color</span>:white </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>伪元素</strong>是一个附加至选择器末的关键词，允许你<strong>对被选择元素的特定部分</strong>修改样式</p><p>常见的伪元素有：</p><ul><li><code>::before/:before</code>在选择器前添加content指定的内容，并且设定样式</li><li><code>::after/:after</code>在选择器后添加content指定的内容，并且设定样式</li><li><code>::first-letter/:first-letter</code>修改选择器内容第一个文字的样式</li><li><code>::first-line/:first-line</code>修改选择器内容第行文字的样式</li><li><code>::marker</code>选中一个 list item 的 marker box，后者通常含有一个项目符号或者数字。它作用在任何设置了<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" title="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display">display: list-item</a>的元素或伪元素上</li><li><code>::selection</code>修改鼠标选中项的样式</li><li><code>::placeholder</code>修改输入框占位符的样式</li></ul><h2 id="伪类和伪元素的区别"><a href="#伪类和伪元素的区别" class="headerlink" title="伪类和伪元素的区别"></a>伪类和伪元素的区别</h2><p><strong>语法区别</strong></p><p>css2中伪元素和伪类的写法是一致的，都是使用单冒号+名称来表示，<strong>在css3规范中为了清晰的加以区分，推荐使用双冒号标识伪元素</strong></p><p><strong>含义区别</strong></p><p><strong>伪类</strong>是设置指定元素在<strong>特定状态</strong>下的样式。</p><p><strong>伪元素</strong>是设置指定元素<strong>特定部分</strong>的内容和样式。</p><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors">CSS选择器</a></p><h2 id="直接选择器"><a href="#直接选择器" class="headerlink" title="直接选择器"></a>直接选择器</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors">通用选择器</a></p><p>选择所有元素。（可选）可以将其限制为特定的名称空间或所有名称空间</p><p><strong>语法：</strong> <code>*</code>,<code>ns|*</code>,<code>*|*</code></p><p><strong>例子：</strong> <code>*</code> 将匹配文档的所有元素。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors">元素选择器</a></p><p>按照给定的节点名称，选择所有匹配的元素。</p><p><strong>语法：</strong> <code>elementname</code></p><p><strong>例子：</strong> <code>input</code> 匹配任何 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> 元素。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors">类选择器</a></p><p>按照给定的 <code>class</code> 属性的值，选择所有匹配的元素。</p><p><strong>语法：</strong> <code>.classname</code></p><p><strong>例子：</strong> <code>.index</code> 匹配任何 <code>class</code> 属性中含有 “index” 类的元素。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors">ID 选择器</a></p><p>按照 <code>id</code> 属性选择一个与之匹配的元素。需要注意的是，一个文档中，每个 ID 属性都应当是唯一的。</p><p><strong>语法：</strong> <code>#idname</code></p><p><strong>例子：</strong> <code>#toc</code> 匹配 ID 为 “toc” 的元素。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">属性选择器</a></p><p>按照给定的属性，选择所有匹配的元素。</p><p><strong>语法：</strong> <code>[attr]</code>,<code>[attr=value]</code>,<code>[attr~=value]</code>,<code>[attr|=value]</code>,<code>[attr^=value]</code>,<code>[attr$=value]</code>,<code>[attr*=value]</code></p><p><strong>例子：</strong> <code>[autoplay]</code> 选择所有具有 <code>autoplay</code> 属性的元素（不论这个属性的值是什么）。</p><h2 id="伪选择器"><a href="#伪选择器" class="headerlink" title="伪选择器"></a>伪选择器</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类</a></p><p><code>:</code> 伪选择器支持按照未被包含在文档树中的状态信息来选择元素。</p><p><strong>例子：</strong> <code>a:visited</code> 匹配所有曾被访问过的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a"><code>&lt;a&gt;</code></a> 元素。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">伪元素</a></p><p><code>::</code> 伪选择器用于表示无法用 HTML 语义表达的实体。</p><p><strong>例子：</strong> <code>p::first-line</code> 匹配所有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p"><code>&lt;p&gt;</code></a> 元素的第一行。</p><h1 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h1><p><img src="https://i.postimg.cc/V6MZMCks/CSS.png" alt="CSS优先级.png"></p><p>层叠优先级是:</p><p><strong>浏览器缺省 &lt; 外部样式表 &lt; 内部样式表 &lt; 内联样式</strong></p><p>其中样式表又有:</p><p><strong>类选择器 &lt; 类派生选择器 &lt; ID选择器 &lt; ID派生选择器</strong></p><h1 id="px-em-rem的区别"><a href="#px-em-rem的区别" class="headerlink" title="px, em, rem的区别"></a>px, em, rem的区别</h1><ul><li><code>px</code> 固定像素单位，不能随其它元素的变化而变化</li><li><code>em</code>是相对于父元素的单位，会随着父元素变化而变化</li><li><code>rem</code>是相对于根元素<code>html</code>，它会随着<code>html</code>元素变化而变化</li></ul><h1 id="BFC和IFC的理解"><a href="#BFC和IFC的理解" class="headerlink" title="BFC和IFC的理解"></a>BFC和IFC的理解</h1><p><a href="https://juejin.cn/post/7072174649735381029">前端人员不要只知道KFC，你应该了解 BFC、IFC、GFC 和 FFC</a></p><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>Block Fomatting Context，块级格式上下文，是一个独立的渲染区域，区域与外部毫不相干</p><p><strong>如何触发</strong>：浮动，绝对定位元素，行内块，表格单元格，表格标题，溢出元素，弹性盒子</p><p><strong>布局规则</strong>：</p><ul><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算BFC的高度时，浮动元素也参与计算</li></ul><p><strong>应用场景</strong>：</p><ul><li>解决块级元素垂直方向margin重叠</li><li>解决高度坍塌问题</li><li>清楚浮动</li></ul><h2 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h2><p>Inline Formatting Context， 行级格式化上下文</p><p><strong>如何触发</strong>：块级元素中只包含内联级别元素</p><p><strong>布局规则</strong>：</p><ul><li>在一个IFC内，子元素是水平方向横向排列的，并且垂直方向起点为元素顶部。</li><li>子元素只会计算横向样式空间，【padding、border、margin】，垂直方向样式空间不会被计算，【padding、border、margin】。</li><li>在垂直方向上，子元素会以不同形式来对齐（vertical-align）</li><li>能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的行框（line box）。行框的宽度是由包含块（containing box）和与其中的浮动来决定。</li><li>IFC中的<code>line box</code>一般左右边贴紧其包含块，但float元素会优先排列。</li><li>IFC中的<code>line box</code>高度由 CSS 行高计算规则来确定，同个<code>IFC</code>下的多个<code>line box</code>高度可能会不同。</li><li>当 <code>inline boxes</code>的总宽度少于包含它们的<code>line box</code>时，其水平渲染规则由 <code>text-align</code> 属性值来决定。</li><li>当一个<code>inline box</code>超过父元素的宽度时，它会被分割成多个<code>boxes</code>，这些<code>boxes</code>分布在多个<code>line box</code>中。如果子元素未设置强制换行的情况下，<code>inline box</code>将不可被分割，将会溢出父元素。</li></ul><p><strong>应用场景</strong>：</p><ul><li>元素水平居中</li><li>多行文本水平垂直居中</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.yuque.com/baiyueguang-rfnbu/tr4d0i/rz15kr">前端面试八股文</a></p><p><a href="https://juejin.cn/post/7269794410573512758">前端铜九铁十面试必备八股文——HTML&amp;CSS</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;个人整理前端八股文和面试题，分模块梳理  &lt;/p&gt;
&lt;p&gt;包含转载内容&lt;/p&gt;
&lt;h1 id=&quot;iframe优缺点&quot;&gt;&lt;a href=&quot;#iframe优缺点&quot; class=&quot;headerlink&quot; title=&quot;iframe优缺点&quot;&gt;&lt;/a&gt;iframe优缺点&lt;/h1&gt;&lt;p</summary>
      
    
    
    
    <category term="前端技术" scheme="https://fallenhert.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="HTML" scheme="https://fallenhert.github.io/tags/HTML/"/>
    
    <category term="八股文" scheme="https://fallenhert.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>南京运满满的一年</title>
    <link href="https://fallenhert.github.io/2023/08/09/%E6%8B%BE%E6%A2%A6/20230623-%E6%BB%A1%E5%B8%AE/"/>
    <id>https://fallenhert.github.io/2023/08/09/%E6%8B%BE%E6%A2%A6/20230623-%E6%BB%A1%E5%B8%AE/</id>
    <published>2023-08-08T16:00:00.000Z</published>
    <updated>2023-08-09T09:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><p>拿到满帮的offer是在 21年的11月，在22年考研的前头。如果没有这个offer，我可能会孤注一掷地去拼搏考研，也可能不会，毕竟我的性格和心态摆在了那边。</p><p>22年考研的失败是一个教训，差不多就行的准备是行不通的，必须要全力以赴才行。但我开窍地还是太晚了些。</p><p>同家里人讨论下来，尽管现在学历贬值，但研究生仍然是重要的一个环节，随决定下来走出国留学的路线。规划上，满帮是毕业后一年的去向。</p><h2 id="魔鬼训练营"><a href="#魔鬼训练营" class="headerlink" title="魔鬼训练营"></a>魔鬼训练营</h2><p>入职满帮的第一个环节是新人培训，两周的时间，从素质训练拓展到洗脑宣传。再后面，作为产研的同学，便是一个月的魔鬼训练营。8个8人小组共同完成同一个课题，既有横向对比，又有组内的相互评价。</p><p>我很幸运分到了一个不错的组里面，五个服务端，两个客户端，一个测试。我是两个客户端中菜的那个。其他组有的只有一个前端，有的没有测试，我们的人员分工和职能很完善。项目出题人是组内服务端同学的TL，这一批3月份就进来实习的同学已经承接了组内的业务，对课题也有着超过其他组的想法。沾服务端同学的光，我们不缺乏创意和思路，我们有着用不完的想法和源源不断的需求迭代点。就从我自身出发，我欠缺技术实践。</p><p>由于前端的实现是任意的，相较于App，微信提供的小程序生态对菜鸡更为友好，加上微信社区的一些技术支持和我原有的小程序开发经验，我们两名客户端选择Taro-react为基础实践框架，分别实现两个用户端的微信小程序开发。</p><p>实践证明，我的前端技术趋近于空白，flex布局、react框架的生命周期使用、CSS样式的调整、UI设计，每个都足以让人啼笑。好在同组的大佬有一段健康的实习经历，给了我一个弹射起步，实践入门了这些并不复杂的开发环节。这样，我们欠缺的好像只剩下创新和时间。</p><p>创新是有代价的，包括时间成本。我们依次尝试一些简单的创新，再深入，被指导老师调侃指导，然后修改变更。指导老师在具体的技术实现上给到的帮助很少，更多的是思路上的变化，但这些有时候更有效果。</p><p>训练营遇到了很多问题，包括技术上的，时间上的，需求抉择上的，身体上的。没有靠背的椅子让我一直伏案腰背痛。但好在结果还算令人满意，小组第一，但组内没有一个人获得个人前十。大家努力地很平均。成品获得的评价很高，像是一个足以进入市场的应用。</p><p>这应该是我在满帮最辛苦，也收获最大的一个月。后续在工位上的生活再并没有这一个月来的这么辛苦，每天都九点半下班。但好像对服务端的同学来讲，九点半下班是常态了。</p><h2 id="业务承接"><a href="#业务承接" class="headerlink" title="业务承接"></a>业务承接</h2><p>我承接的业务是支付订金页。下单中重要的一个环节，直接关乎到司机能否正常下单。比较繁琐的是页面上面的金额计算和优惠券。这两个点都涉及到一些关联展示，产品需求的迭代让这两部分内容变得臃肿且混乱，增多与其他组件的耦合。我的工作就是保证这些穿梭的业务功能不要紊乱。其实有些简单的解决方法，是在交互之后请求服务端，从而把整块内容计算和交互流程扔到服务端。</p><p>整个业务的交接过程并不算长，从入手第一个需求，到完整的承接整个页面后续的需求迭代不到月余。后面又陆续接手了指派相关的页面，然后就维护了这几个页面一年。最后，又花一天把这些页面扔了出去。</p><h2 id="留学去向"><a href="#留学去向" class="headerlink" title="留学去向"></a>留学去向</h2><p>11月份的时候，港中文的offer是我获取的第一个转折，在这个时候，我就知道我后续再一年的路要走向什么方向。荣获了一年的摆烂权。</p><p>从那时候开始，时不时想着就是要多学一些什么。TL给我们画饼，让我们去学跨端，去学原生，说会安排专门的导师来辅导我们进行只能转换。我兴冲冲地报了班，只可以兑现地太晚了，大多内部培训都是不了了之。大佬没兴趣弄，大伙不愿意学，导师腾不出时间。</p><p>人们都在一个圈子里来回地转，隧道的结尾还是隧道。</p><p>原本留学是一直让我期待的，但现在我却多少带着忧虑。我不知道我会不会就这样一直兜兜转转下去。我不知道结局会怎么样。</p><h2 id="导师离职"><a href="#导师离职" class="headerlink" title="导师离职"></a>导师离职</h2><p>我导师辉哥是在过完年回来2月份左右的时候离职的，走的很平静，好像早已经计划好了一样。</p><p>听同事说，他前女友考公上岸之后把他斩了，过年来找他复合，要他回江西老家考公务员。我们觉得主要原因还是没有升职，留人不住。去年他还有升职名额，和其他两个人组成升职小分队，写PPT写到凌晨三点；今年连名额都没有。</p><p>他是一个优秀的前端开发者，温柔随和的导师，早我三届的校招生，某种意义上被集团吃干抹尽了。</p><p>他不是我们组里面第一个告别的人，但给我留下的感触最深。一起吃饭、一起聊天的人突然就少了一个，他的名字成为了一个人们无法再提起的名字。这就是人生，离别总是人生的背景色。</p><p>又想起来爽哥在早些跟我说过的，满帮并非长久之计。</p><p>辉哥走之前让我对未来早做打算，我告诉他我要去留学的时候，他很开心。</p><h2 id="架构调整"><a href="#架构调整" class="headerlink" title="架构调整"></a>架构调整</h2><p>辉哥走后没多久，组织做了整体的架构变动。</p><p>先是服务端的架构调整，然后是测试侧的，最后到客户端这边。前前后后从2月份开始一直到5月份左右结束，历时不短，但就从我的角度来看，我很难看到有业务线上的效率提升。</p><p>集团是一个过敏捷的公司，在一些制度的规约下，文档是不被强调、也是开发者腾不出时间来完成或者维护的东西。最多是在业务交接的时候简单梳理一下代码逻辑便草草扔给后来者。整个架构变动就是在这样的背景下潦草收场的。那三个月的开发体验很痛苦，跟服务端沟通、服务端不知道、让去问某某某；让测试造场景、测试不知道、需要去问某某某。所幸的是整体业务量还算适中，让我工作开展的还算游刃有余。</p><p>当架构调整落到我头上时，已经快到五月底了，老板好像还记得当年给我吃的饼，让我换组去捣鼓Android原生开发。出于无用的责任感，我，在同事看来，过早地摊牌了要离职的想法。不然听他们说，还有可能拿到大礼包。</p><h2 id="页面重构上线"><a href="#页面重构上线" class="headerlink" title="页面重构上线"></a>页面重构上线</h2><p>离职前的最后一个大事件是页面重构，从3月份拉仓库开始一直干到8月份。</p><p>算是我自己从零开始，入手集团内部推进的前端框架，拉齐各条业务线的后端、测试介入修改，最后统一推上线的。从这个角度、工时人力投入看，可以看作是一个项目了。但由于前端只有我一个人来维护开发，多少差点意思。</p><p>可惜临门一脚还没有踢出去，我就得离职了。不过可喜可贺，bug应该改得差不多了，留给后面同学的还算不错。</p><p>盘算着日子，过几天就可以上线了，多少还有一些期待，有一种功德圆满的感觉。</p><h2 id="业务为王"><a href="#业务为王" class="headerlink" title="业务为王"></a>业务为王</h2><p>最后一点，做一个吐槽吧。</p><p>感觉在满帮里面，前端开发的话语权小的可怜，谁都可以上来踩两脚。</p><p>业务是话语权最高的，产品借着业务的鸡毛令箭也有着比较高的话语权。他们时不时会要求你在规定的时间内完成超出工作量的任务，如果你完成不了，就是你的能力问题。会投诉你，借你的老板来压你。</p><p>但反过来，业务和产品的能力往往令人担忧。</p><p>集团产品好像没有统一的培训规范，每一个产品写出来的PRD都风格迥异，是否能够遇上一个不错的产品多少靠些运气。新来的一位博士产品就是一个典型。PRD写的极为精简、简单到每一句话都需要他后续扩充，从业务开始到上线，PRD往往被改得面目全非。因为修改频繁，他常修改业务需求不做告知，等着开发有空时候翻阅PRD的时候，欸，又变了。对业务代码的理解近乎为零，难以理解公司内部系统的运作，仍为他在公司平台上修改就可以直接塞到代码里。在本职工作尚未完成时，还有心思去操心测试的工作。</p><p>一年的业务下来，业务老板让我更没有自信，毕竟这一年项目级别的业务需求，不是上线后不敢开开关，就是上线之后一段时间就下线了。存活下来的项目十不足一。我不知道其他公司的业务需求上线后是不是大多都是这个情况，但就满帮的情况来看，我对这块傲慢但是无能的业务并不满意。</p><p>或许这也是集团向上管理的遗留问题。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>一年的时光荏苒，我遇到了不少糟心的事，也认识了很多有趣的人。</p><p>他们沉睡在我的微信列表中，或许不会再有机会联系。</p><p>但我希望我们的人生在未来还会有些交集，到那时候，他们应该正自由热烈地生活着。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;杂记&quot;&gt;&lt;a href=&quot;#杂记&quot; class=&quot;headerlink&quot; title=&quot;杂记&quot;&gt;&lt;/a&gt;杂记&lt;/h2&gt;&lt;p&gt;拿到满帮的offer是在 21年的11月，在22年考研的前头。如果没有这个offer，我可能会孤注一掷地去拼搏考研，也可能不会，毕竟我的性格</summary>
      
    
    
    
    <category term="拾梦" scheme="https://fallenhert.github.io/categories/%E6%8B%BE%E6%A2%A6/"/>
    
    
    <category term="工作" scheme="https://fallenhert.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
    <category term="YMM" scheme="https://fallenhert.github.io/tags/YMM/"/>
    
  </entry>
  
  <entry>
    <title>双指针问题解析</title>
    <link href="https://fallenhert.github.io/2023/08/03/%E5%88%B7%E9%A2%98/leetcode-%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>https://fallenhert.github.io/2023/08/03/%E5%88%B7%E9%A2%98/leetcode-%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2023-08-02T16:00:00.000Z</published>
    <updated>2023-08-09T09:39:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始刷题，遇到的首个思路是双指针。在这篇中积累总结一下。</p><h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h2><p>给你一个字符串 s，找到 s 中最长的回文子串。如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p><strong>示例1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure><p><strong>解析思路</strong></p><p>中心扩散法</p><ol><li>定义 i 位置为初始位，注意到从初始位往后复数位如果均相同，则为回文字符串，如”aa“，”bbb“，记为[ i , j ]</li><li>在1的基础上，建立两个指针，start指向字符串初始位 i，end指向字符串结束位 j</li><li>由中心向外扩散，如果 start-1 位 与 end+1 位 相同，[ start - 1, end + 1] 也为回文字符串</li><li>重复3步骤，直到获得 i 初始位下的最长回文字符串</li><li>i 递增，重复1-4步骤，直到获取到最长回文字符串</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, start = <span class="number">0</span>, end = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        start = i;</span><br><span class="line">        end = i;</span><br><span class="line">        <span class="keyword">while</span>(end + <span class="number">1</span> &lt; s.<span class="property">length</span> &amp;&amp; s[end + <span class="number">1</span>] == s[i]) &#123;</span><br><span class="line">            end += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(start &gt; <span class="number">0</span> &amp;&amp; end &lt; s.<span class="property">length</span> &amp;&amp; s[end + <span class="number">1</span>] == s[start - <span class="number">1</span>]) &#123;</span><br><span class="line">            end += <span class="number">1</span>;</span><br><span class="line">            start -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (end &gt; start &amp;&amp; str.<span class="property">length</span> &lt; end - start + <span class="number">1</span>) &#123;</span><br><span class="line">            str = s.<span class="title function_">slice</span>(start, end + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str ? str : s[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></h2><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><strong>说明：</strong>你不能倾斜容器。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure><p><strong>解析思路</strong></p><p>向中心夹逼</p><ol><li>建立两个指针，left指向最左位，right指向最右侧，每次计算left与right之间 可盛水的量</li><li>比较左右两条边的大小，小的一边往内侧移动，计算 可盛水的量</li><li>直到左右侧重合前，获取最大可盛水的量即为题解</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">height</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = height.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> maxArea = <span class="number">0</span>; <span class="comment">// 最大容积</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="comment">// 计算出 当前的容积  与最大容积比较，取出最大的</span></span><br><span class="line">        <span class="keyword">const</span> currentArea = (right - left)*<span class="title class_">Math</span>.<span class="title function_">min</span>(height[left],height[right]);</span><br><span class="line">        maxArea = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxArea,currentArea);</span><br><span class="line">        <span class="comment">//  left 向内移动 </span></span><br><span class="line">        <span class="keyword">if</span>(height[left] &lt; height[right])&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode.cn/problems/4sum/">18. 四数之和</a></h2><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,0,-1,0,-2,2], target = 0</span><br><span class="line">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,2,2,2], target = 8</span><br><span class="line">输出：[[2,2,2,2]]</span><br></pre></td></tr></table></figure><p><strong>解析思路</strong></p><p>基于三数相加的思路。 </p><ol><li>将数组从低到高依次排列</li><li>通过 i 和 j 定下前两个参数的位置（三数之和场景简化 用 i 定位第一个参数）</li><li>用 L 和 R 作为指针，根据 从低到高的排列顺序 夹逼到target场景 —— 如果四数之和较target小，L右移；如果四数之和较target大，R左移。直到L、R重合前，将每一组值满足target的解输出到 outPut当中</li><li>其中添加while循环避免重复数组的出现</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="property">length</span> &lt; <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params"> a, b </span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="keyword">const</span> outPut = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span> - <span class="number">2</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> L = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">let</span> R = nums.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span>( L &lt; R )&#123;</span><br><span class="line">                <span class="keyword">let</span> sum = nums[i] + nums[j] + nums[L] + nums[R]</span><br><span class="line">                <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">                    outPut.<span class="title function_">push</span>([ nums[i], nums[j], nums[L], nums[R] ])</span><br><span class="line">                    <span class="keyword">while</span>(nums[R]==nums[R-<span class="number">1</span>] &amp;&amp; R &gt; <span class="number">2</span>)&#123;</span><br><span class="line">                        R--</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(nums[L]==nums[L+<span class="number">1</span>] &amp;&amp; L &lt; nums.<span class="property">length</span> - <span class="number">2</span>)&#123;</span><br><span class="line">                        L++</span><br><span class="line">                    &#125;</span><br><span class="line">                    R--</span><br><span class="line">                    L++</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; target)&#123;</span><br><span class="line">                    R--</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sum &lt; target)&#123;</span><br><span class="line">                    L++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> outPut</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>解题思路</strong></p><p>快慢指针</p><p>因为比较简单，在这边就不展开描述了。贴一下代码仅供参考</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span> (<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len =nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] != val)&#123;</span><br><span class="line">            nums[k++] = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>双指针的常见用法有两种，左右指针和快慢指针。</p><p>左右指针用于中心扩展或者夹逼压缩、这两种场景。</p><p>快慢指针用于数组或列表遍历检索特定元素场景。</p><p>相比较于常规的暴力破解法，往往能够降低一个层级的复杂度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚开始刷题，遇到的首个思路是双指针。在这篇中积累总结一下。&lt;/p&gt;
&lt;h2 id=&quot;5-最长回文子串&quot;&gt;&lt;a href=&quot;#5-最长回文子串&quot; class=&quot;headerlink&quot; title=&quot;5. 最长回文子串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcod</summary>
      
    
    
    
    <category term="练习" scheme="https://fallenhert.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="leetcode" scheme="https://fallenhert.github.io/tags/leetcode/"/>
    
    <category term="JavaScript" scheme="https://fallenhert.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>结局会怎样04</title>
    <link href="https://fallenhert.github.io/2023/07/30/%E5%91%A8%E5%B8%B8/20230730/"/>
    <id>https://fallenhert.github.io/2023/07/30/%E5%91%A8%E5%B8%B8/20230730/</id>
    <published>2023-07-29T16:00:00.000Z</published>
    <updated>2023-08-03T12:28:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每周纪要"><a href="#每周纪要" class="headerlink" title="每周纪要"></a>每周纪要</h2><ol><li>出现了一例线上问题，上游传递的数据无法消费，但是上游无法排查修改，最后由消费方，也就是我这边做了兼容性调整。给测试留下了Y2的第一例线上问题。</li><li>正式从满帮离职，跟我的交接人兼大学内素未谋面的同学吃了顿饭。感慨良多。</li><li>推完了《仁王2》的主线。</li></ol><h2 id="简思"><a href="#简思" class="headerlink" title="简思"></a>简思</h2><h3 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h3><p>线上问题的解决思路是尽快修复满足条件，由消费方完成修改可以接受。</p><p>但后续往往缺少对应的方案来跟进，没有有效手段来推进上游完成整个链路的修改。</p><p>如果集团整体问题的修改思路，是出现线上问题才来调整，多少带些不合理性</p><h3 id="关于游戏"><a href="#关于游戏" class="headerlink" title="关于游戏"></a>关于游戏</h3><p>无耻的逃课可以避免苦难，但无法阻止后续苦难的发生。</p><p>想要变强的主要途径还是在先前的挫折中磨练。</p><p>或者开风灵月影。</p><h3 id="关于离职"><a href="#关于离职" class="headerlink" title="关于离职"></a>关于离职</h3><p>这一块要说的就有些多了，单独开一篇简文来讲讲吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;每周纪要&quot;&gt;&lt;a href=&quot;#每周纪要&quot; class=&quot;headerlink&quot; title=&quot;每周纪要&quot;&gt;&lt;/a&gt;每周纪要&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;出现了一例线上问题，上游传递的数据无法消费，但是上游无法排查修改，最后由消费方，也就是我这边做了兼容性调整。给测</summary>
      
    
    
    
    <category term="周报" scheme="https://fallenhert.github.io/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="日常" scheme="https://fallenhert.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>结局会怎样03</title>
    <link href="https://fallenhert.github.io/2023/07/16/%E5%91%A8%E5%B8%B8/20230716/"/>
    <id>https://fallenhert.github.io/2023/07/16/%E5%91%A8%E5%B8%B8/20230716/</id>
    <published>2023-07-15T16:00:00.000Z</published>
    <updated>2023-08-03T13:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每周纪要"><a href="#每周纪要" class="headerlink" title="每周纪要"></a>每周纪要</h2><ol><li>上周业务催命的项目，这周上线后不敢开开关。</li><li>重构项目开发正式提上日程，服务端介入协调，下周一测试介入。按照先前的沟通看，问题一堆。包括页面的问题，和同步各方的问题。</li><li>入手了《仁王2》，跟着学徒的攻略走，今天推完了飞翔篇。</li><li>追完了《绝命毒师》第三季。</li></ol><h2 id="简思"><a href="#简思" class="headerlink" title="简思"></a>简思</h2><h3 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h3><p>首次推动重构这种事情，有些像一个项目，因为业务线涉及众多，需要协调的方比较多；但也不完全像一个项目，因为客户端开发人员就我一个，又因为主体是框架迁移的问题，关联方的改动比较少但是回归点又很多。</p><p>头一次自己推动这种需求，我在整个流程处理中存在不少问题。部分确实是无知，不了解服务端的发布灰度流程、不了解不同业务线的迭代需求等等。具体问题归结下来，还是可以说公司内部缺乏对应维护的文档，需求迭代很快，但是从不维护，大多数都是即写即用的场景或者干脆不写即用。我认为这是过敏捷的弊端，在追求发展的时候，需要一部分时间和人力来维护基础建设。</p><p>目前集团自己搭建出来的代码框架以及流程框架已经像空中楼阁一般，让人感觉随时摇摇欲坠。</p><h3 id="关于游戏"><a href="#关于游戏" class="headerlink" title="关于游戏"></a>关于游戏</h3><p>“你不一定需要击败所有敌人”</p><p>第一次遇到并挑战牛头鬼的时候，撞的头破血流。</p><p>一个棒子可以挥半个屏幕，两棒子可以把我打死。</p><p>夜刀神是打过第二章下来最难的boss，但并不是卡我最久的。卑鄙的外乡人通过召唤稀人、妖鬼化等无耻方式硬生生突了过去。如果能够早些善用马头鬼的魂核，应该会再降低一层难度。</p><p>在这一路上，我遇到了很多困难，有时候简单的复杂的一起出现，一般先解决掉好解决的，再故作勇气来应对复杂的问题。或者通过迂回绕开一些档口，从另一个角度看问题。处理失败，我得付出对应的代价，重试并且丢失精华，并没有现实中犯错的代价高。好在我会逐渐变得更加厉害。</p><p>最困难的，是不得不一个人独自面对问题的场合，好在游戏里面我有无数次的回顾复盘机会，我可以不断的试错来找到属于我的最优解。</p><p>可惜人生只有一次，时间太少了。</p><h3 id="关于剧"><a href="#关于剧" class="headerlink" title="关于剧"></a>关于剧</h3><p>《绝命毒师》第三季的反转很是精彩。</p><p>Skyler从一开始的难以接受，逼迫丈夫离开，到逐渐接受丈夫制毒的工作并开始帮他洗钱。这个过程在这一季中展示地富有冲突性、戏剧性并因为现实的压力而变得合理。</p><p>Pinkman在剧情中保持着低智商、重情感、易冲动的形象。Combo的伏笔回收推动着他去无理智的复仇，吸嗨了之后、过分地夸大了自己的能动性。</p><p>White在这一季中是一个富有能力却一直被周围左右的角色，更多的联系、更多的身不由己。</p><p>Hank像个怯懦的战神，是老白这一季中的牺牲品，毕竟人都不是不死之身，经历过战场都会恐惧。</p><p>炸鸡叔是一个很有魅力的反派角色，领导着一批具有专业且具有执行力的手下。</p><p>不要犯同一个问题两次，我希望我在之后的编码生涯中也能够做到。</p><p>剧如人生，持续有新的矛盾点与困境，也有新的出路与转机。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;每周纪要&quot;&gt;&lt;a href=&quot;#每周纪要&quot; class=&quot;headerlink&quot; title=&quot;每周纪要&quot;&gt;&lt;/a&gt;每周纪要&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;上周业务催命的项目，这周上线后不敢开开关。&lt;/li&gt;
&lt;li&gt;重构项目开发正式提上日程，服务端介入协调，下周一测</summary>
      
    
    
    
    <category term="周报" scheme="https://fallenhert.github.io/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="日常" scheme="https://fallenhert.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>结局会怎样02</title>
    <link href="https://fallenhert.github.io/2023/07/09/%E5%91%A8%E5%B8%B8/20230709/"/>
    <id>https://fallenhert.github.io/2023/07/09/%E5%91%A8%E5%B8%B8/20230709/</id>
    <published>2023-07-08T16:00:00.000Z</published>
    <updated>2023-07-08T13:15:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每周纪要"><a href="#每周纪要" class="headerlink" title="每周纪要"></a>每周纪要</h2><ol><li>需求临上线。相关UI验收未通过，关联人员被拉起来改样式改到2点。对应模块测试同步下班。</li><li>待发布时，临时同步需求。对接测试不会取测试包，打包大佬崩溃。</li><li>业务需求暂停。页面重构推进。集团新框架使用体感不佳。</li><li>《绝命毒师》追完第二季</li></ol><h2 id="简思"><a href="#简思" class="headerlink" title="简思"></a>简思</h2><h3 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h3><p>我在这边上班的工作具体是什么？</p><p>最近的倒排期需求，整个流程规范都不正确，业务还一直追魂索命耍流氓。你跟他谈流程，他跟你耍流氓；你跟他耍流氓，他跟你提老板。大概上班的工作就是哄老板开心吧。</p><p>工作上应该有分工并相互联系，每一种工作应该都有对应的边界。对应工作的人应该能够熟练掌握边界内的事情，并且不涉及他人的工作，单一职责原则。文档也是重要的一个环节，详尽的文案可以减少沟通的开销。</p><p>感觉这是公司目前所欠缺的。整体流程以业务为核心，造就了过敏捷的开发要求，研发在整体流程中话语权极低，被频繁变更的需求点任意左右。庞大的研发压力，一方面使得员工仅仅完成开发任务已经非常勉强，造成文档以及其他流程的空白；另一方面也推动外包人员入驻，使得整体人员变更频繁，需要更多沟通。空缺的文档，增加了沟通的成本，使得整体开发流程滞后，进入下一个恶性循环。除此之外，业务老板对整体流程享有的完全解释权和傲慢姿态，令人作呕。</p><p>我希望我能够逐渐成为一个更优秀的人，为了与更优秀的人作同事。</p><h3 id="关于得失"><a href="#关于得失" class="headerlink" title="关于得失"></a>关于得失</h3><p>看《绝命毒师》有所感触。</p><p>第一季中男主角 Walter White因为身患肺癌时日无多决定铤而走险制冰毒为妻儿搏一搏以后生活读书的费用，第三季中他的妻子Skyler却因为他的隐瞒和违反亲自拆开了他的家庭、男主的期望沦为泡影。</p><p>听《陀飞轮》也有类似的歌词，“用我尚有换我没有，其实已用尽所拥有”。</p><p>时间在拼命流逝，我还剩下几载光景。</p><p>这是我讨厌加班的主要原因。社会要求我有钱，但我的生命中有比挣钱更重要的事情。</p><h3 id="关于剧"><a href="#关于剧" class="headerlink" title="关于剧"></a>关于剧</h3><p>如果抛开毒品这一个点，《绝命毒师》其实可以看作才华横溢的个人在传统行业创业的故事。</p><p>困难总是接踵而至的，这才是世间的常态。</p><p>你掌握着独一无二的技术，就会被市场需要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;每周纪要&quot;&gt;&lt;a href=&quot;#每周纪要&quot; class=&quot;headerlink&quot; title=&quot;每周纪要&quot;&gt;&lt;/a&gt;每周纪要&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;需求临上线。相关UI验收未通过，关联人员被拉起来改样式改到2点。对应模块测试同步下班。&lt;/li&gt;
&lt;li&gt;待发布</summary>
      
    
    
    
    <category term="周报" scheme="https://fallenhert.github.io/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="日常" scheme="https://fallenhert.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>结局会怎样01</title>
    <link href="https://fallenhert.github.io/2023/07/02/%E5%91%A8%E5%B8%B8/20230702/"/>
    <id>https://fallenhert.github.io/2023/07/02/%E5%91%A8%E5%B8%B8/20230702/</id>
    <published>2023-07-01T16:00:00.000Z</published>
    <updated>2023-07-08T10:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每周纪要"><a href="#每周纪要" class="headerlink" title="每周纪要"></a>每周纪要</h2><ol><li>满帮内部倒排期项目提测。个人认为项目存在极大不合理性，上线后负反馈概率高。</li><li>本人主导推动的页面框架迁移提测持续受阻。离职前完成重构上线或成泡影。考虑交接页面迭代与维护工作。</li><li>首次用React.animated制作动画，效果被业务老板夸了。但是存在图标变化抽搐的问题，尝试解决中。</li><li>粤语学习与健身仍在日程计划中，目前坚持存在难度。粤语找不到合适的开口途径。</li><li>港中文签证下发，相关赴港证件办理提上日程。</li><li>同事推荐美剧《怪奇物语》与《绝命毒师》分别追完第一季。</li></ol><h2 id="简思"><a href="#简思" class="headerlink" title="简思"></a>简思</h2><h3 id="关于原则"><a href="#关于原则" class="headerlink" title="关于原则"></a>关于原则</h3><p>被同事吐槽说没有原则，有些产品在需求提测之后提及的改动，我仍会协商着去修改。</p><p>挺好玩的，一个唯老板马首是瞻、愿意周末去加两天班的人，说我没有原则。</p><p>她说她有原则，老板让她干啥她干啥。我说人的原则不能建立在别人的想法和预期之上。她不理我了。</p><p>她应该不在意我有没有原则，只是希望我不要给她加工作量。</p><p>后面跟产品协商的时候还要拉上测试。</p><p>不过，职场里面没有这方面的原则很奇怪么。没有话语权的人守不住自己的原则。</p><h3 id="关于协作"><a href="#关于协作" class="headerlink" title="关于协作"></a>关于协作</h3><p>我还是学不会如何正确地推动别人来实现我的要求。在对方并没有收益的情况下。</p><p>这是框架迁移持续受阻的主要原因，被对方看来更高优先级的事件阻塞了。</p><p>或许我应该为对方创造即时收益或者期许长期收益，两者都很难。</p><h3 id="关于剧"><a href="#关于剧" class="headerlink" title="关于剧"></a>关于剧</h3><p>不可否认，《怪奇物语》第一季使用的标准校园美剧模板，辅以出色的演员与背景音，让这部剧本身处在一个高水平线上。</p><p>但剧中老师对于前往颠倒世界的杂技演员与跳蚤解说，毁掉了这部剧。</p><p>这个解说，试图在剧中建立起现实中的物理体系，却与后续诸多情节相悖。</p><p>一个天赋异禀的小女孩，她大脑产生的念力，通过仪器放大之后，可以打开一个绝对稳定的、一人大小的空间隧道。且这个通道，产生的能量仅会扰乱周围磁场，甚至没有出现动物行为异常。</p><p>我是一个门外的物理爱好者，自我推测这个能量级，至少得在恒星级以上。毕竟太阳的核聚变也没有能够撕开通道。</p><p>这完全破坏了我之后的观影体验。</p><p>我更倾向于，剧情将颠倒世界和真实世界描绘成叠放在一起的两个图层。略有不同的是，两者的空间本就相互交错。十一的前辈，碰巧在特异点上施力，诱发了裂隙的产生。当然，多少需要伴随一些剧变。一段时间后，不知情的二战流民在一旁建起来自己的村落，为了掩人耳目，有关机构也没有出面制止。</p><p>我觉得我编的都比剧情里面靠谱。</p><p>不要乱碰硬科幻。</p><h3 id="关于财富"><a href="#关于财富" class="headerlink" title="关于财富"></a>关于财富</h3><p>周五晚上，舍友告诉我，他学弟高考考了全省401名。我说，哦。</p><p>他接着说，有个私立学校出300w让他复读一年。我说，啊？</p><p>他问我，要你怎么选。我躺在地板上想了三秒钟，300w。</p><p>我觉得我很肤浅，于是我爬起来问他，要你呢？他笑了，肯定选300w。</p><p>他接着说，他学弟有些犹豫，但群里所有人都在劝他去复读。那可是300w。</p><p>我不清楚这是不是一个骗局，但舍友告诉我广东就是这样的。</p><p>之前他高考的时候，有学校出20w+80w找他去复读。去复读给20w，考上清北再给80w。他没去。</p><p>时代变化很快，现在已经涨到了160w+140w。</p><p>舍友很后悔，觉得他早生了那么几年。</p><p>我想了一晚上，想不到我干什么能够一年赚160w。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;每周纪要&quot;&gt;&lt;a href=&quot;#每周纪要&quot; class=&quot;headerlink&quot; title=&quot;每周纪要&quot;&gt;&lt;/a&gt;每周纪要&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;满帮内部倒排期项目提测。个人认为项目存在极大不合理性，上线后负反馈概率高。&lt;/li&gt;
&lt;li&gt;本人主导推动的页面</summary>
      
    
    
    
    <category term="周报" scheme="https://fallenhert.github.io/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="日常" scheme="https://fallenhert.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
